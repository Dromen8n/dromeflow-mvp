/* ===============================================
   SCRIPT DE VALIDA√á√ÉO CSS CENTRALIZADO
   =============================================== */

// Fun√ß√£o para validar se o CSS centralizado est√° funcionando
function validateCentralizedCSS() {
    console.log('üîß Iniciando valida√ß√£o do CSS centralizado...');
    
    const validationResults = {
        cssFileLoaded: false,
        variablesAvailable: false,
        classesWorking: false,
        duplicationsRemoved: false,
        responsiveWorking: false,
        themeCompatible: false
    };
    
    // 1. Verificar se o arquivo CSS est√° carregado
    const cssLinks = document.querySelectorAll('link[href*="css/main.css"]');
    validationResults.cssFileLoaded = cssLinks.length > 0;
    console.log(`üìÑ CSS main.css carregado: ${validationResults.cssFileLoaded ? '‚úÖ' : '‚ùå'}`);
    
    // 2. Verificar se as vari√°veis CSS est√£o dispon√≠veis
    const computedStyle = getComputedStyle(document.documentElement);
    const accentPrimary = computedStyle.getPropertyValue('--accent-primary').trim();
    validationResults.variablesAvailable = accentPrimary !== '';
    console.log(`üé® Vari√°veis CSS dispon√≠veis: ${validationResults.variablesAvailable ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚îî‚îÄ --accent-primary: ${accentPrimary}`);
    
    // 3. Verificar se as classes principais est√£o funcionando
    const testClasses = [
        'btn', 'btn-primary', 'form-input', 'modal-backdrop', 
        'data-table', 'badge-success', 'loading', 'spinner'
    ];
    
    let workingClasses = 0;
    testClasses.forEach(className => {
        const testElement = document.createElement('div');
        testElement.className = className;
        document.body.appendChild(testElement);
        
        const styles = getComputedStyle(testElement);
        const hasStyles = styles.display !== 'initial' || 
                         styles.padding !== '0px' || 
                         styles.background !== 'rgba(0, 0, 0, 0)';
        
        if (hasStyles) workingClasses++;
        document.body.removeChild(testElement);
    });
    
    validationResults.classesWorking = workingClasses >= testClasses.length * 0.8;
    console.log(`üîß Classes CSS funcionando: ${validationResults.classesWorking ? '‚úÖ' : '‚ùå'} (${workingClasses}/${testClasses.length})`);
    
    // 4. Verificar se duplica√ß√µes foram removidas
    const gestaoModuleContent = document.querySelector('#gestao-unidades, #gestao-administradores');
    let duplicationsRemoved = true;
    
    if (gestaoModuleContent) {
        const inlineStyles = document.querySelectorAll('style');
        const hasLargeInlineCSS = Array.from(inlineStyles).some(style => 
            style.textContent.length > 1000
        );
        duplicationsRemoved = !hasLargeInlineCSS;
    }
    
    validationResults.duplicationsRemoved = duplicationsRemoved;
    console.log(`üßπ Duplica√ß√µes CSS removidas: ${validationResults.duplicationsRemoved ? '‚úÖ' : '‚ùå'}`);
    
    // 5. Verificar responsividade
    const originalWidth = window.innerWidth;
    const supportsMediaQueries = window.matchMedia('(max-width: 768px)').matches !== undefined;
    validationResults.responsiveWorking = supportsMediaQueries;
    console.log(`üì± Media queries funcionando: ${validationResults.responsiveWorking ? '‚úÖ' : '‚ùå'}`);
    
    // 6. Verificar compatibilidade com temas
    const isDarkMode = document.body.classList.contains('dark');
    const bgPrimary = computedStyle.getPropertyValue('--bg-primary').trim();
    const isThemeWorking = bgPrimary !== '';
    validationResults.themeCompatible = isThemeWorking;
    console.log(`üåô Sistema de temas: ${validationResults.themeCompatible ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚îî‚îÄ Modo atual: ${isDarkMode ? 'Dark' : 'Light'}`);
    console.log(`   ‚îî‚îÄ --bg-primary: ${bgPrimary}`);
    
    // Resultado final
    const successCount = Object.values(validationResults).filter(Boolean).length;
    const totalTests = Object.keys(validationResults).length;
    const successRate = (successCount / totalTests) * 100;
    
    console.log('\nüìä RESULTADO DA VALIDA√á√ÉO:');
    console.log(`   ‚úÖ Sucessos: ${successCount}/${totalTests}`);
    console.log(`   üìà Taxa de sucesso: ${successRate.toFixed(1)}%`);
    
    if (successRate >= 90) {
        console.log('üéâ VALIDA√á√ÉO APROVADA - CSS centralizado funcionando perfeitamente!');
    } else if (successRate >= 70) {
        console.log('‚ö†Ô∏è  VALIDA√á√ÉO PARCIAL - Algumas melhorias podem ser necess√°rias');
    } else {
        console.log('‚ùå VALIDA√á√ÉO FALHOU - Problemas cr√≠ticos detectados');
    }
    
    return {
        success: successRate >= 90,
        results: validationResults,
        successRate: successRate
    };
}

// Fun√ß√£o para testar performance do CSS
function testCSSPerformance() {
    console.log('\n‚ö° Testando performance do CSS...');
    
    const startTime = performance.now();
    
    // Criar elementos de teste com diferentes classes
    const testElements = [];
    const classesToTest = [
        'btn btn-primary', 'form-group', 'modal-backdrop', 
        'data-table', 'info-card', 'badge-success'
    ];
    
    classesToTest.forEach((classes, index) => {
        const element = document.createElement('div');
        element.className = classes;
        element.textContent = `Test Element ${index}`;
        document.body.appendChild(element);
        testElements.push(element);
    });
    
    // For√ßar reflow
    testElements.forEach(el => {
        el.offsetHeight; // For√ßa c√°lculo de layout
    });
    
    // Limpar elementos de teste
    testElements.forEach(el => document.body.removeChild(el));
    
    const endTime = performance.now();
    const renderTime = endTime - startTime;
    
    console.log(`‚è±Ô∏è  Tempo de renderiza√ß√£o: ${renderTime.toFixed(2)}ms`);
    
    if (renderTime < 10) {
        console.log('üöÄ Performance EXCELENTE - CSS otimizado');
    } else if (renderTime < 50) {
        console.log('‚úÖ Performance BOA - Dentro do esperado');
    } else {
        console.log('‚ö†Ô∏è  Performance LENTA - Revisar otimiza√ß√µes');
    }
    
    return renderTime;
}

// Fun√ß√£o para debug de classes CSS espec√≠ficas
function debugCSSClass(className) {
    console.log(`üîç Debug da classe: .${className}`);
    
    const element = document.createElement('div');
    element.className = className;
    document.body.appendChild(element);
    
    const styles = getComputedStyle(element);
    const relevantProperties = [
        'display', 'background', 'color', 'padding', 'margin', 
        'border', 'font-size', 'font-weight'
    ];
    
    console.log('üìã Propriedades aplicadas:');
    relevantProperties.forEach(prop => {
        const value = styles.getPropertyValue(prop);
        if (value && value !== 'initial' && value !== 'normal') {
            console.log(`   ${prop}: ${value}`);
        }
    });
    
    document.body.removeChild(element);
}

// Fun√ß√£o para verificar conflitos CSS
function checkCSSConflicts() {
    console.log('\nüîç Verificando conflitos CSS...');
    
    const conflicts = [];
    
    // Verificar se h√° estilos inline grandes (poss√≠veis duplica√ß√µes)
    const inlineStyles = document.querySelectorAll('style');
    inlineStyles.forEach((style, index) => {
        if (style.textContent.length > 500) {
            conflicts.push(`Estilo inline #${index} muito grande (${style.textContent.length} chars)`);
        }
    });
    
    // Verificar classes duplicadas
    const stylesheets = Array.from(document.styleSheets);
    const classNames = new Set();
    const duplicates = new Set();
    
    stylesheets.forEach(sheet => {
        try {
            const rules = Array.from(sheet.cssRules || []);
            rules.forEach(rule => {
                if (rule.selectorText) {
                    const selectors = rule.selectorText.split(',');
                    selectors.forEach(selector => {
                        const className = selector.trim();
                        if (classNames.has(className)) {
                            duplicates.add(className);
                        }
                        classNames.add(className);
                    });
                }
            });
        } catch (e) {
            // Ignorar erros de CORS
        }
    });
    
    if (conflicts.length === 0 && duplicates.size === 0) {
        console.log('‚úÖ Nenhum conflito CSS detectado');
    } else {
        console.log('‚ö†Ô∏è  Conflitos encontrados:');
        conflicts.forEach(conflict => console.log(`   - ${conflict}`));
        if (duplicates.size > 0) {
            console.log(`   - ${duplicates.size} seletores duplicados detectados`);
        }
    }
    
    return {
        conflicts: conflicts.length,
        duplicates: duplicates.size
    };
}

// Disponibilizar fun√ß√µes globalmente
window.validateCentralizedCSS = validateCentralizedCSS;
window.testCSSPerformance = testCSSPerformance;
window.debugCSSClass = debugCSSClass;
window.checkCSSConflicts = checkCSSConflicts;

// Auto-executar valida√ß√£o se solicitado
if (window.location.search.includes('validateCSS')) {
    setTimeout(() => {
        validateCentralizedCSS();
        testCSSPerformance();
        checkCSSConflicts();
    }, 1000);
}

console.log('üéØ Fun√ß√µes de valida√ß√£o CSS carregadas:');
console.log('   - validateCentralizedCSS() - Valida√ß√£o completa');
console.log('   - testCSSPerformance() - Teste de performance');
console.log('   - debugCSSClass("nome-da-classe") - Debug espec√≠fico');
console.log('   - checkCSSConflicts() - Verificar conflitos');
console.log('   - Adicione ?validateCSS √† URL para auto-executar');
